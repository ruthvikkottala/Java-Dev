import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

import javaDemo.data.Customer;

public class StreamsDemo {

	public static void main(String[] args) {

		List<Customer> customers = new ArrayList<>();
		Customer c1 = new Customer("Ram", 30, 12345d, Arrays.asList(126543924, 346531465));
		Customer c2 = new Customer("Ravi", 32, 12243d, Arrays.asList(12654324, 34653465));
		Customer c3 = new Customer("Rahu", 34, 12345d, Arrays.asList(126543724, 346534665));
		Customer c4 = new Customer("Rakul", 30, 12334d, Arrays.asList(128654324, 3465545));
		Customer c5 = new Customer("Sam", 29, 12356d, Arrays.asList(126543264, 346531465));
		Customer c6 = new Customer("Kelab", 30, 12367d, Arrays.asList(12654324, 34381465));
		customers.addAll(Arrays.asList(c1, c2, c3, c4, c5, c6));

		// MAP
		List<String> Names = customers.stream().map(Customer::getName).collect(Collectors.toList());
		System.out.println("Names -> " + Names);
		
		// FLAT MAP
		List<Integer> AllNumbers = customers.stream().map(Customer::getAreaNumbers)
				.flatMap(numList -> numList.stream()).collect(Collectors.toList());

		System.out.println("All phone Numbers -> " + AllNumbers);

		// distinct(), count(), sorted()
		Long count = customers.stream().map(Customer::getAreaNumbers).flatMap(list->list.stream())
				.distinct().count();
		System.out.println("Unique numbers count -> "+count);
		
		System.out.println("Sorted Names -> "+customers.stream().map(Customer::getName).sorted().collect(Collectors.toList()));
			// Custom sort using comparator
		System.out.println("Sorted based on age -> "+customers.stream().sorted((customer1,customer2)->customer1.getAge()<=customer2.getAge()? 1: -1).collect(Collectors.toList()));
	}

}
