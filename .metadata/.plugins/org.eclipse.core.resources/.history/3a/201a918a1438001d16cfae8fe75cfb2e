import java.util.Date;
import java.util.List;
import java.util.function.BiPredicate;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Supplier;

public class Practise {

	public static void main(String[] args) {
		List<String> names = List.of("D1", "D2", "D3", "D4");
		names.stream().forEach(name -> System.out.println(name));

		// lambdas and Functional Interface
		FunctionalInterfaceDemo demoObj = ( x,  y) -> {
			if (FunctionalInterfaceDemo.checkNonNull(x) && FunctionalInterfaceDemo.checkNonNull(y))
				System.out.println(x + y);
			else
				System.out.println("Check the values");

		};
		demoObj.calcSum(10, 290);

		// predicate functional interface
		Predicate<Integer> checkNonNull = i -> i != null;
		Integer x = null;
		System.out.println("The value '" + x + "' is non null : " + checkNonNull.test(x));

		// predicate joining
		Predicate<String> checkLength = s -> s.length() >= 5;
		Predicate<String> checkEvenLength = s -> s.length() % 2 == 0;

		System.out.println("Result after AND merge " + checkLength.and(checkEvenLength).test("Test String"));
		System.out.println("Result after OR merge " + checkLength.or(checkEvenLength).test("Test String"));
		System.out.println("Result after Negate " + checkEvenLength.negate().test("Test String"));

		// Function functional interface
		Function<Integer, Integer> cubeFunction = i -> {
			if (checkNonNull.test(i))
				return i * i * i;
			return null;
		};
		System.out.println("The cube value is " + cubeFunction.apply(10));

		// Functional Chaining
		Function<Integer, Integer> doubleIt = i -> 2 * i;
		Function<Integer, Integer> cubeIt = i -> i * i * i;
		Function<Integer, Integer> threetime = i -> 3 * i;
		Function<Integer, Integer> fivetime = i -> 5 * i;
		Function<Integer, Integer> onetime = i -> i;
		Function<Integer, Integer> fourtime = i -> 4 * i;
//		System.out.println("Result after andThen "+doubleIt.andThen(cubeIt).apply(3));
//		System.out.println("Result after compose "+doubleIt.compose(cubeIt).apply(3));
		Integer result = onetime.compose(doubleIt).andThen(threetime).compose(fourtime).andThen(fivetime).apply(2);
		System.out.println(result);

		// Consumer functional interface
		Consumer<Integer> consumer = i -> System.out.println("Value accepted : " + i);
		consumer.accept(10);

		// Consumer chaining
		Consumer<String> consumer1 = s->System.out.println("Accepted String1 : "+s);
		Consumer<String> consumer2 = s->System.out.println("Accepted String2 : "+s);
		consumer2.andThen(consumer1).accept("Test String");
		
		// Supplier functional Interface
		Supplier<Date> supplier = ()-> new Date();
		System.out.println("Supplier function : "+supplier.get());
		
		// Bi variants
		BiPredicate<Integer, Integer> checkTotal = (a,b)-> a+b>=5;
	}
}
